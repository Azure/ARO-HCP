#
# Purpose: Manage service cluster and supporting infra for its services
# Managed Resources:
# * AKS SVC cluster
# * SVC Key Vault with OneCert registration
# * MIs, CosmosDB and RBAC for the RP
# * MIs, Postgres DB, OIDC storage and RBAC for Cluster Service
# * MIs, Postgres DB, certificates and RBAC for the Maestro Server
# * MIs and RBAC for ACRPull
# * metrics collection
# Managed Processes:
# * Manage ACRPull
# * Configure and upgrade Istio
#
$schema: "pipeline.schema.v1"
serviceGroup: Microsoft.Azure.ARO.HCP.Service.Infra
rolloutName: Service Cluster Rollout
resourceGroups:
# Query parameters from global deployment, e.g. ACR resource IDs
- name: global
  resourceGroup: '{{ .global.rg }}'
  subscription: '{{ .global.subscription.key }}'
  steps:
  - name: output
    action: ARM
    template: templates/output-global.bicep
    parameters: configurations/output-global.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    outputOnly: true
# Query parameters from regional deployment, e.g. Azure Monitor workspace ID
- name: regional
  resourceGroup: '{{ .regionRG }}'
  subscription: '{{ .svc.subscription.key }}'
  steps:
  - name: output
    action: ARM
    template: templates/output-region.bicep
    parameters: configurations/output-region.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    outputOnly: true
- name: service
  resourceGroup: '{{ .svc.rg }}'
  subscription: '{{ .svc.subscription.key }}'
  steps:
  # Create SVC KV
  - name: infra
    action: ARM
    template: templates/svc-infra.bicep
    parameters: configurations/svc-infra.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    variables:
    - name: globalMSIId
      input:
        resourceGroup: global
        step: output
        name: globalMSIId
    - name: logAnalyticsWorkspaceId
      input:
        resourceGroup: regional
        step: output
        name: logAnalyticsWorkspaceId
  - name: infra-output
    action: ARM
    template: templates/svc-infra-lookup.bicep
    parameters: configurations/svc-infra-lookup.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    outputOnly: true
    dependsOn:
    - resourceGroup: service
      step: infra
  # Configure certificate issuers for the SVC KV
  - name: oncert-private-kv-issuer
    action: SetCertificateIssuer
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    applicationId:
      configRef: ev2.assistedId.applicationId
    vaultBaseUrl:
      input:
        resourceGroup: service
        step: infra-output
        name: svcKeyVaultUrl
    issuer:
      value: OneCertV2-PrivateCA
  - name: oncert-public-kv-issuer
    action: SetCertificateIssuer
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    applicationId:
      configRef: ev2.assistedId.applicationId
    vaultBaseUrl:
      input:
        resourceGroup: service
        step: infra-output
        name: svcKeyVaultUrl
    issuer:
      value: OneCertV2-PublicCA
  # Create SVC cluster
  - name: cluster
    action: ARM
    template: templates/svc-cluster.bicep
    parameters: configurations/svc-cluster.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    variables:
    - name: globalMSIId
      input:
        resourceGroup: global
        step: output
        name: globalMSIId
    - name: ocpAcrResourceId
      input:
        resourceGroup: global
        step: output
        name: ocpAcrResourceId
    - name: svcAcrResourceId
      input:
        resourceGroup: global
        step: output
        name: svcAcrResourceId
    - name: azureMonitoringWorkspaceId
      input:
        resourceGroup: regional
        step: output
        name: azureMonitoringWorkspaceId
    - name: logAnalyticsWorkspaceId
      input:
        resourceGroup: regional
        step: output
        name: logAnalyticsWorkspaceId
    - name: azureFrontDoorResourceId
      input:
        resourceGroup: global
        step: output
        name: azureFrontDoorResourceId
    dependsOn:
    - resourceGroup: service
      step: oncert-private-kv-issuer
    - resourceGroup: service
      step: oncert-public-kv-issuer
  - name: cluster-output
    action: ARM
    template: templates/output-svc-cluster.bicep
    parameters: configurations/output-svc-cluster.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    outputOnly: true
    dependsOn:
    - resourceGroup: regional
      step: output
    - resourceGroup: service
      step: cluster
  - name: prometheus
    # Deploy prometheus first since istio depends on it's CRDs
    aksCluster: '{{ .svc.aks.name }}'
    action: Shell
    command: make -C ../observability/prometheus deploy
    dryRun:
      variables:
      - name: DRY_RUN
        value: "true"
    variables:
    - name: PROMETHEUS_OPERATOR_REGISTRY
      configRef: svc.prometheus.prometheusOperator.image.registry
    - name: PROMETHEUS_OPERATOR_REPOSITORY
      configRef: svc.prometheus.prometheusOperator.image.repository
    - name: PROMETHEUS_OPERATOR_DIGEST
      configRef: svc.prometheus.prometheusOperator.image.digest
    - name: PROMETHEUS_CONFIG_RELOADER_REGISTRY
      configRef: svc.prometheus.prometheusConfigReloader.image.registry
    - name: PROMETHEUS_CONFIG_RELOADER_REPOSITORY
      configRef: svc.prometheus.prometheusConfigReloader.image.repository
    - name: PROMETHEUS_CONFIG_RELOADER_DIGEST
      configRef: svc.prometheus.prometheusConfigReloader.image.digest
    - name: PROMETHEUS_SPEC_REGISTRY
      configRef: svc.prometheus.prometheusSpec.image.registry
    - name: PROMETHEUS_SPEC_REPOSITORY
      configRef: svc.prometheus.prometheusSpec.image.repository
    - name: PROMETHEUS_SPEC_DIGEST
      configRef: svc.prometheus.prometheusSpec.image.digest
    - name: PROMETHEUS_SPEC_REPLICAS
      configRef: svc.prometheus.prometheusSpec.replicas
    - name: PROMETHEUS_SPEC_SHARDS
      configRef: svc.prometheus.prometheusSpec.shards
    - name: PROMETHEUS_SPEC_VERSION
      configRef: svc.prometheus.prometheusSpec.version
    - name: PROMETHEUS_NAMESPACE_LABEL
      configRef: svc.prometheus.namespaceLabel
    - name: RESOURCE_GROUP
      configRef: svc.rg
    - name: CLUSTER_NAME
      configRef: svc.aks.name
    - name: DCR_REMOTE_WRITE_URL
      input:
        resourceGroup: service
        step: cluster-output
        name: dcrRemoteWriteUrl
    - name: PROMETHEUS_UAMI_CLIENT_ID
      input:
        resourceGroup: service
        step: cluster-output
        name: prometheusUAMIClientId
    dependsOn:
    - resourceGroup: service
      step: cluster
    shellIdentity:
      input:
        resourceGroup: global
        step: output
        name: globalMSIId
  - name: istio-config
    # configure istio
    aksCluster: '{{ .svc.aks.name }}'
    action: Helm
    releaseName: 'istio'
    releaseNamespace: 'aks-istio-system'
    chartDir: ../istio/deploy
    valuesFile: ../istio/values.yaml
    dependsOn:
    - resourceGroup: service
      step: prometheus
    identityFrom:
      resourceGroup: global
      step: output
      name: globalMSIId
  - name: istio-upgrade
    # - updates workload to use istio on version svc.istio.targetVersion
    # - configures istio IP tag usage
    aksCluster: '{{ .svc.aks.name }}'
    action: Shell
    command: ./istio.sh
    workingDir: ./scripts
    variables:
    - name: TARGET_VERSION
      configRef: svc.istio.targetVersion
    - name: ISTIOCTL_VERSION
      configRef: svc.istio.istioctlVersion
    - name: ISTIO_INGRESS_GATEWAY_IP_ADDRESS_NAME
      configRef: svc.istio.ingressGatewayIPAddressName
    - name: TAG
      configRef: svc.istio.tag
    - name: REGION_RESOURCEGROUP
      configRef: regionRG
    dependsOn:
    - resourceGroup: service
      step: istio-config
    shellIdentity:
      input:
        resourceGroup: global
        step: output
        name: globalMSIId
  - name: acrpull
    aksCluster: '{{ .svc.aks.name }}'
    action: Helm
    releaseName: acrpull
    releaseNamespace: acrpull
    chartDir: ./../acrpull/deploy
    valuesFile: ./../acrpull/deploy/values.yaml
    dependsOn:
    - resourceGroup: service
      step: prometheus
    identityFrom:
      resourceGroup: global
      step: output
      name: globalMSIId
  - name: arobit-output
    action: ARM
    template: templates/arobit-lookup.bicep
    parameters: configurations/arobit-lookup.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    outputOnly: true
    variables:
    - name: AROBIT_FORWARDER_DIGEST
      configRef: arobit.forwarder.image.digest
    - name: AROBIT_FORWARDER_REPOSITORY
      configRef: arobit.forwarder.image.repository
    - name: AROBIT_FORWARDER_REGISTRY
      configRef: arobit.forwarder.image.registry
    - name: AROBIT_MDSD_DIGEST
      configRef: arobit.mdsd.image.digest
    - name: AROBIT_MDSD_REPOSITORY
      configRef: arobit.mdsd.image.repository
    - name: AROBIT_MDSD_REGISTRY
      configRef: arobit.mdsd.image.registry
    - name: AROBIT_MDSD_ENABLED
      configRef: arobit.mdsd.enabled
    - name: AROBIT_GENEVA_RP_ACCOUNT_NAME
      configRef: geneva.logs.rp.accountName
    - name: AROBIT_GENEVA_RP_SECRET_NAME
      configRef: geneva.logs.rp.secretName
    - name: AROBIT_GENEVA_RP_SAN
      configRef: geneva.logs.rp.san
    - name: AROBIT_GENEVA_RP_NAMESPACE
      configRef: geneva.logs.rp.namespace
    - name: AROBIT_CLUSTER_TYPE
      value: "svc"
    - name: AROBIT_SECRET_PROVIDER_KEY_VAULT
      configRef: serviceKeyVault.name
    - name: AROBIT_SECRET_PROVIDER_TENANT_ID
      configRef: tenantId
    - name: MI_NAME
      configRef: logs.mdsd.msiName
    - name: RESOURCEGROUP
      configRef: svc.rg
    - name: REGION
      configRef: region
    - name: GENEVA_ENVIRONMENT
      configRef: geneva.logs.environment
    - name: KUSTO_INGESTIONURL
      configRef: kusto.ingestionUrl
    - name: ENVIRONMENT
      configRef: kusto.environmentName 
    - name: CLUSTER_NAME
      configRef: svc.aks.name
    dependsOn:
    - resourceGroup: service
      step: cluster
  - name: arobit
    aksCluster: '{{ .svc.aks.name }}'
    action: Helm
    releaseName: 'arobit'
    releaseNamespace: 'arobit'
    chartDir: ../observability/arobit/deploy
    valuesFile: ../observability/arobit/values-svc.yaml
    inputVariables:
      tenantId:
        resourceGroup: service
        step: arobit-output
        name: tenantId
      msiClientId:
        resourceGroup: service
        step: arobit-output
        name: msiClientId
    identityFrom:
      resourceGroup: global
      step: output
      name: globalMSIId
  - name: kube-events
    aksCluster: '{{ .svc.aks.name }}'
    action: Helm
    releaseName: kube-events
    releaseNamespace: monitoring
    chartDir: ./../observability/kube-events/deploy
    valuesFile: ./../observability/kube-events/values.yaml
    dependsOn:
    - resourceGroup: service
      step: cluster
    identityFrom:
      resourceGroup: global
      step: output
      name: globalMSIId
