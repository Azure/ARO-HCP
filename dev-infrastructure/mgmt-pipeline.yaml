#
# Purpose: Manage management cluster and supporting infra for its services
# Managed Resources:
# * AKS MGMT cluster
# * MSI, CX and MGMT Key Vaults with OneCert registration
# * metrics collection
# * MI, certificate and RBAC for Maestro
#
$schema: "pipeline.schema.v1"
serviceGroup: Microsoft.Azure.ARO.HCP.Management.Infra
rolloutName: Management Cluster Rollout
resourceGroups:
- name: global
  resourceGroup: '{{ .global.rg }}'
  subscription: '{{ .global.subscription.key }}'
  steps:
  - name: output
    action: ARM
    template: templates/output-global.bicep
    parameters: configurations/output-global.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    outputOnly: true
- name: service
  resourceGroup: '{{ .svc.rg }}'
  subscription: '{{ .svc.subscription.key }}'
  steps:
  - name: output
    action: ARM
    template: templates/output-svc.bicep
    parameters: configurations/output-svc.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    outputOnly: true
- name: regional
  resourceGroup: '{{ .regionRG }}'
  subscription: '{{ .svc.subscription.key }}'
  steps:
  - name: output
    action: ARM
    template: templates/output-region.bicep
    parameters: configurations/output-region.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    outputOnly: true
- name: management
  resourceGroup: '{{ .mgmt.rg }}'
  subscription: '{{ .mgmt.subscription.key }}'
  steps:
  - name: rpRegistration
    action: ProviderFeatureRegistration
    providerConfigRef: mgmt.subscription.providers
    identityFrom:
      resourceGroup: global
      step: output
      name: globalMSIId
  - name: mgmt-infra
    action: ARM
    template: templates/mgmt-infra.bicep
    parameters: configurations/mgmt-infra.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    variables:
    - name: clusterServiceMIResourceId
      input:
        resourceGroup: service
        step: output
        name: cs
    - name: msiRefresherMIResourceId
      input:
        resourceGroup: service
        step: output
        name: msiRefresher
    - name: logAnalyticsWorkspaceId
      input:
        resourceGroup: regional
        step: output
        name: logAnalyticsWorkspaceId
    - name: globalMSIId
      input:
        resourceGroup: global
        step: output
        name: globalMSIId
    dependsOn:
    - resourceGroup: management
      step: rpRegistration
  # Configure certificate issuers for the MC KVs
  - name: cx-oncert-public-kv-issuer
    action: SetCertificateIssuer
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    applicationId:
      configRef: ev2.assistedId.applicationId
    vaultBaseUrl:
      input:
        resourceGroup: management
        step: mgmt-infra
        name: cxKeyVaultUrl
    issuer:
      value: OneCertV2-PublicCA
  - name: mgmt-oncert-private-kv-issuer
    action: SetCertificateIssuer
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    applicationId:
      configRef: ev2.assistedId.applicationId
    vaultBaseUrl:
      input:
        resourceGroup: management
        step: mgmt-infra
        name: mgmtKeyVaultUrl
    issuer:
      value: OneCertV2-PrivateCA
  - name: mgmt-oncert-public-kv-issuer
    action: SetCertificateIssuer
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    applicationId:
      configRef: ev2.assistedId.applicationId
    vaultBaseUrl:
      input:
        resourceGroup: management
        step: mgmt-infra
        name: mgmtKeyVaultUrl
    issuer:
      value: OneCertV2-PublicCA
  # Build the MC
  - name: mgmt-cluster
    action: ARM
    template: templates/mgmt-cluster.bicep
    parameters: configurations/mgmt-cluster.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    variables:
    - name: ocpAcrResourceId
      input:
        resourceGroup: global
        step: output
        name: ocpAcrResourceId
    - name: svcAcrResourceId
      input:
        resourceGroup: global
        step: output
        name: svcAcrResourceId
    - name: globalMSIId
      input:
        resourceGroup: global
        step: output
        name: globalMSIId
    - name: azureMonitoringWorkspaceId
      input:
        resourceGroup: regional
        step: output
        name: azureMonitoringWorkspaceId
    - name: hcpAzureMonitoringWorkspaceId
      input:
        resourceGroup: regional
        step: output
        name: hcpAzureMonitoringWorkspaceId
    - name: maestroEventGridNamespaceId
      input:
        resourceGroup: regional
        step: output
        name: maestroEventGridNamespaceId
    - name: logAnalyticsWorkspaceId
      input:
        resourceGroup: regional
        step: output
        name: logAnalyticsWorkspaceId
    dependsOn:
    - resourceGroup: management
      step: cx-oncert-public-kv-issuer
    - resourceGroup: management
      step: mgmt-oncert-private-kv-issuer
    - resourceGroup: management
      step: mgmt-oncert-public-kv-issuer
  - name: mgmt-nsp
    action: ARM
    template: templates/mgmt-nsp.bicep
    parameters: configurations/mgmt-nsp.tmpl.bicepparam
    deploymentLevel: ResourceGroup
    variables:
    - name: serviceClusterSubscriptionId
      input:
        resourceGroup: service
        step: output
        name: subscriptionId
    dependsOn:
    - resourceGroup: management
      step: mgmt-cluster
    - resourceGroup: management
      step: mgmt-infra
  - name: prometheus
    aksCluster: '{{ .mgmt.aks.name }}'
    action: Shell
    command: make -C ../observability/prometheus deploy
    dryRun:
      variables:
      - name: DRY_RUN
        value: "true"
    variables:
    - name: PROMETHEUS_OPERATOR_REGISTRY
      configRef: mgmt.prometheus.prometheusOperator.image.registry
    - name: PROMETHEUS_OPERATOR_REPOSITORY
      configRef: mgmt.prometheus.prometheusOperator.image.repository
    - name: PROMETHEUS_OPERATOR_DIGEST
      configRef: mgmt.prometheus.prometheusOperator.image.digest
    - name: PROMETHEUS_CONFIG_RELOADER_REGISTRY
      configRef: mgmt.prometheus.prometheusConfigReloader.image.registry
    - name: PROMETHEUS_CONFIG_RELOADER_REPOSITORY
      configRef: mgmt.prometheus.prometheusConfigReloader.image.repository
    - name: PROMETHEUS_CONFIG_RELOADER_DIGEST
      configRef: mgmt.prometheus.prometheusConfigReloader.image.digest
    - name: PROMETHEUS_SPEC_REGISTRY
      configRef: mgmt.prometheus.prometheusSpec.image.registry
    - name: PROMETHEUS_SPEC_REPOSITORY
      configRef: mgmt.prometheus.prometheusSpec.image.repository
    - name: PROMETHEUS_SPEC_DIGEST
      configRef: mgmt.prometheus.prometheusSpec.image.digest
    - name: PROMETHEUS_SPEC_REPLICAS
      configRef: mgmt.prometheus.prometheusSpec.replicas
    - name: PROMETHEUS_SPEC_SHARDS
      configRef: mgmt.prometheus.prometheusSpec.shards
    - name: PROMETHEUS_SPEC_VERSION
      configRef: mgmt.prometheus.prometheusSpec.version
    - name: PROMETHEUS_NAMESPACE_LABEL
      configRef: mgmt.prometheus.namespaceLabel
    - name: RESOURCE_GROUP
      configRef: mgmt.rg
    - name: CLUSTER_NAME
      configRef: mgmt.aks.name
    - name: CS_ENVIRONMENT
      configRef: clustersService.environment
    dependsOn:
    - resourceGroup: management
      step: mgmt-cluster
    shellIdentity:
      input:
        resourceGroup: global
        step: output
        name: globalMSIId
        # Install ACRpull
  - name: acrpull
    aksCluster: '{{ .mgmt.aks.name }}'
    action: Shell
    command: make -C ../acrpull deploy
    dryRun:
      variables:
      - name: DRY_RUN
        value: "true"
    variables:
    - name: ACRPULL_DIGEST
      configRef: acrPull.image.digest
    - name: ACRPULL_REPO
      configRef: acrPull.image.repository
    - name: ACRPULL_REGISTRY
      configRef: acrPull.image.registry
    dependsOn:
    - resourceGroup: management
      step: prometheus
    shellIdentity:
      input:
        resourceGroup: global
        step: output
        name: globalMSIId
        # Install cluster patches
  - name: mgmt-fixes
    aksCluster: '{{ .mgmt.aks.name }}'
    action: Shell
    command: make -C ../mgmt-fixes deploy
    dryRun:
      variables:
      - name: DRY_RUN
        value: "true"
    variables:
    - name: APPLY_KUBELET_FIXES
      configRef: mgmt.applyKubeletFixes
    dependsOn:
    - resourceGroup: management
      step: mgmt-cluster
    shellIdentity:
      input:
        resourceGroup: global
        step: output
        name: globalMSIId
  - name: arobit
    aksCluster: '{{ .mgmt.aks.name }}'
    action: Shell
    command: make -C ../arobit deploy
    dryRun:
      variables:
      - name: DRY_RUN
        value: "true"
    variables:
    - name: AROBIT_FORWARDER_DIGEST
      configRef: arobit.forwarder.image.digest
    - name: AROBIT_FORWARDER_REPOSITORY
      configRef: arobit.forwarder.image.repository
    - name: AROBIT_FORWARDER_REGISTRY
      configRef: arobit.forwarder.image.registry
    - name: AROBIT_MDSD_DIGEST
      configRef: arobit.mdsd.image.digest
    - name: AROBIT_MDSD_REPOSITORY
      configRef: arobit.mdsd.image.repository
    - name: AROBIT_MDSD_REGISTRY
      configRef: arobit.mdsd.image.registry
    - name: AROBIT_MDSD_ENABLED
      configRef: arobit.mdsd.enabled
    - name: AROBIT_GENEVA_RP_ACCOUNT_NAME
      configRef: geneva.logs.rp.accountName
    - name: AROBIT_GENEVA_RP_SECRET_NAME
      configRef: geneva.logs.rp.secretName
    - name: AROBIT_GENEVA_RP_SAN
      configRef: geneva.logs.rp.san
    - name: AROBIT_GENEVA_RP_NAMESPACE
      configRef: geneva.logs.rp.namespace
    - name: AROBIT_GENEVA_CLUSTER_LOGS_ACCOUNT_NAME
      configRef: geneva.logs.cluster.accountName
    - name: AROBIT_GENEVA_CLUSTER_LOGS_SECRET_NAME
      configRef: geneva.logs.cluster.secretName
    - name: AROBIT_GENEVA_CLUSTER_LOGS_SAN
      configRef: geneva.logs.cluster.san
    - name: AROBIT_GENEVA_CLUSTER_LOGS_NAMESPACE
      configRef: geneva.logs.cluster.namespace
    - name: AROBIT_CLUSTER_TYPE
      value: "mgmt"
    - name: AROBIT_SECRET_PROVIDER_KEY_VAULT
      configRef: mgmtKeyVault.name
    - name: AROBIT_SECRET_PROVIDER_TENANT_ID
      configRef: tenantId
    - name: MI_NAME
      configRef: logs.mdsd.msiName
    - name: RESOURCEGROUP
      configRef: mgmt.rg
    - name: REGION
      configRef: region
    - name: GENEVA_ENVIRONMENT
      configRef: geneva.logs.environment
    dependsOn:
    - resourceGroup: management
      step: mgmt-cluster
    shellIdentity:
      input:
        resourceGroup: global
        step: output
        name: globalMSIId
