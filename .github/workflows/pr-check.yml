---
name: PR Check Tests
on:
  workflow_run:
    workflows:
     - Build Push Images
    branches-ignore:
      - main
    types:
      - completed

jobs:
   frontend_pr_check:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      id-token: 'write'
      contents: 'read'
    runs-on: 'ubuntu-latest'
    outputs:
      service_cluster_name: ${{ steps.find_service_cluster.name }}
      db_name: ${{ steps.setup_db.db_name }}
      db_url: ${{ steps.setup_db.db_url }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 1

      - name: 'Az CLI login'
        uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a # v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Find service cluster'
        id: find_service_cluster
        uses: azure/cli@965c8d7571d2231a54e321ddd07f7b10317f34d9 # v2.0.0
        env:
          RESOURCEGROUP: aro-hcp-dev
        with:
          azcliversion: latest
          inlineScript: |
            echo "name=$(az aks list --resource-group "${RESOURCEGROUP}" --output tsv --query "[?tags.clusterType == 'svc-cluster'].name | [0]")" >> $GITHUB_OUTPUT

      - uses: azure/setup-kubectl@3e0aec4d80787158d308d7b364cb1b702e7feb7f # v4.0.0

      - uses: azure/use-kubelogin@76597ae0fcbaace21b05e13a2cbf8daee2c6e820 # v1.2
        with:
          kubelogin-version: 'v0.1.3'

      - name: 'Setup kubectl for service cluster'
        uses: azure/aks-set-context@37037e33d3a2fc08abe40c887d81c3f6e1eb93b9 # v4.0.0
        with:
          resource-group: 'aro-hcp-dev'
          cluster-name: ${{ steps.find_service_cluster.outputs.name }}
          use-kubelogin: 'true'

      - name: 'Setup DB and Config'
        id: setup_db
        uses: azure/cli@v2
        env:
          RESOURCEGROUP: "aro-hcp-dev"
        with:
          azcliversion: latest
          inlineScript: |
            db_account="${RESOURCEGROUP}-rp-cosmos"
            db_name="pr-test-${GITHUB_RUN_ID}"
            az cosmosdb sql database create -a $db_account -n $db_name -g $RESOURCEGROUP

            for container in Clusters NodePools Subscriptions Billing AsyncOperations; do
              az cosmosdb sql container create -a $db_account -d $db_name -n $container -g $RESOURCEGROUP -p "/partitionKey"
            done

            db_url="$(az cosmosdb show -n $db_name -g $RESOURCEGROUP --query documentEndpoint -o tsv)"

            echo "db_name=$db_name" >> $GITHUB_OUTPUT
            echo "db_url=$db_url" >> $GITHUB_OUTPUT

      - name: 'Deploy Frontend'
        env:
          RESOURCEGROUP: aro-hcp-dev
          DB_NAME: ${{ steps.setup_db.outputs.db_name }}
          DB_URL: ${{ steps.setup_db.outputs.db_url }}
        run: |
          cd frontend/
          NAMESPACE="aro-hcp-${GITHUB_RUN_ID}"
          make kustomize-update-gha
          make kustomize-deploy

      - name: 'Run Smoketests'
        env:
          DB_NAME: ${{ steps.setup_db.outputs.db_name }}
          DB_URL: ${{ steps.setup_db.outputs.db_url }}
        run: |
          cd frontend/
          NAMESPACE="aro-hcp-${GITHUB_RUN_ID}"
          kubectl port-forward -n ${NAMESPACE} svc/aro-hcp-frontend 8443:8443 &
          PROXY_PID=$!
          # give port-forward a chance to setup, it can be slow with AKS
          sleep 10

          make smoke-tests
          kill $PROXY_PID

      - name: 'Destroy Frontend'
        if: always()
        env:
          RESOURCEGROUP: aro-hcp-dev
          DB_NAME: ${{ steps.setup_db.outputs.db_name }}
          DB_URL: ${{ steps.setup_db.outputs.db_url }}
        run: |
          cd frontend/
          NAMESPACE="aro-hcp-${GITHUB_RUN_ID}"
          make kustomize-update-gha
          make kustomize-undeploy

      - name: 'Clean Up DB'
        if: always()
        uses: azure/cli@v2
        env:
          RESOURCEGROUP: "aro-hcp-dev"
          DB_NAME: ${{ steps.setup_db.outputs.db_name }}
          DB_URL: ${{ steps.setup_db.outputs.db_url }}
        with:
          azcliversion: latest
          inlineScript: |
            db_account="${RESOURCEGROUP}-rp-cosmos"
            db_name="pr-test-${GITHUB_RUN_ID}"
            az cosmosdb sql database delete -a $db_account -n $db_name -g $RESOURCEGROUP
