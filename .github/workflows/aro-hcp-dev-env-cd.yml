---
  name: ARO HCP Dev Environment Continuous Deployment
  on:
    pull_request:
      branches:
        - main
      paths:
        - '.github/workflows/aro-hcp-dev-env-cd.yml'
        - 'dev-infrastructure/**/*.bicep'
        - 'dev-infrastructure/**/*.bicepparam'
        - 'frontend/**'
        - 'cluster-service/**'
        - 'internal/**'
        - 'maestro/**'
        - 'pko/**'
        - 'acm/**'
        - 'hypershiftoperator/**'
      types:
        - opened
        - synchronize
        - reopened
        - closed

  concurrency:
    group: ${{ github.workflow }}
    cancel-in-progress: false

  jobs:
    is_running_on_fork:
      runs-on: ubuntu-latest
      steps:
        - name: Fail if PR submitted from fork
          if: ${{ github.event.pull_request.head.repo.full_name != 'Azure/ARO-HCP' }}
          run: core.setFailed('Expected source repository to be Azure/ARO-HCP, re-create PR as a branch of Azure/ARO-HCP')

    deploy_update_infra:
      if: github.event.pull_request.merged == true
      permissions:
        id-token: 'write'
        contents: 'read'
      runs-on: 'ubuntu-latest'
      steps:
        - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
          with:
            fetch-depth: 1

        - name: 'Az CLI login'
          uses: azure/login@v2
          with:
              client-id: ${{ secrets.AZURE_CLIENT_ID }}
              tenant-id: ${{ secrets.AZURE_TENANT_ID }}
              subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - name: 'Deploy or Update'
          uses: azure/cli@v2
          with:
            azcliversion: latest
            inlineScript: |
              SC_RESOURCEGROUP="aro-hcp-dev"
              MC_RESOURCEGROUP="aro-hcp-dev-mc"
              REGION=westus3
              cd dev-infrastructure/

              az group create -g "${SC_RESOURCEGROUP}" -l "${REGION}" --tags persist=true
              az group create -g "${MC_RESOURCEGROUP}" -l "${REGION}" --tags persist=true

              # dev Azure Container Registry (ACR)
              az deployment group create \
                --name "dev-acr-${GITHUB_RUN_ID}" \
                --resource-group "${SC_RESOURCEGROUP}" \
                --template-file templates/dev-acr.bicep \
                --parameters configurations/mvp-dev-acr.bicepparam

              # service cluster
              az deployment group create \
                --name "svc-cluster-${GITHUB_RUN_ID}" \
                --resource-group "${SC_RESOURCEGROUP}" \
                --template-file templates/svc-cluster.bicep \
                --parameters configurations/mvp-svc-cluster.bicepparam \
                --parameters currentUserId="${GITHUB_ACTOR}" \
                --parameters maestroInfraResourceGroup="${SC_RESOURCEGROUP}"

              # management cluster
              az deployment group create \
                --name "mgmt-cluster-${GITHUB_RUN_ID}" \
                --resource-group "${MC_RESOURCEGROUP}" \
                --template-file templates/mgmt-cluster.bicep \
                --parameters configurations/mvp-mgmt-cluster.bicepparam \
                --parameters currentUserId="${GITHUB_ACTOR}" \
                --parameters maestroInfraResourceGroup="${SC_RESOURCEGROUP}" \
                --parameters regionalZoneResourceGroup="${SC_RESOURCEGROUP}"

              MGMT_CLUSTER_NAME=$(az deployment group show --resource-group "${MC_RESOURCEGROUP}" --name "mgmt-cluster-${GITHUB_RUN_ID}" --output tsv --query properties.outputs.aksClusterName.value)
              SVC_CLUSTER_NAME=$(az deployment group show --resource-group "${SC_RESOURCEGROUP}" --name "svc-cluster-${GITHUB_RUN_ID}" --output tsv --query properties.outputs.aksClusterName.value)
              COSMOS_DB_NAME=$(az deployment group show --resource-group "${SC_RESOURCEGROUP}" --name "svc-cluster-${GITHUB_RUN_ID}" --output tsv --query properties.outputs.cosmosDBName.value)
              SVC_KV_NAME=$(az deployment group show --resource-group "${SC_RESOURCEGROUP}" --name "svc-cluster-${GITHUB_RUN_ID}" --output tsv --query properties.outputs.svcKeyVaultName.value)

              # acr role assignments
              az deployment group create \
                --name "dev-acr-roleassignments-${GITHUB_RUN_ID}" \
                --resource-group ${SC_RESOURCEGROUP} \
                --template-file templates/dev-acr-roleassignments.bicep \
                --parameters configurations/mvp-dev-acr-roleassignments.bicepparam

              # service cluster role assignments
              az deployment group create \
                --name "svc-roleassigns-${GITHUB_RUN_ID}" \
                --resource-group "${SC_RESOURCEGROUP}" \
                --template-file templates/dev-aks-roleassignments.bicep \
                --parameters aksClusterName=${SVC_CLUSTER_NAME} \
                --parameters cosmosDBName=${COSMOS_DB_NAME} \
                --parameters grantCosmosAccess=true \
                --parameters githubActionsPrincipalID=${{ secrets.GHA_PRINCIPAL_ID }}

              # management cluster role assignments
              az deployment group create \
                --name "mgmt-roleassigns-${GITHUB_RUN_ID}" \
                --resource-group "${MC_RESOURCEGROUP}" \
                --template-file templates/dev-aks-roleassignments.bicep \
                --parameters aksClusterName=${MGMT_CLUSTER_NAME} \
                --parameters cosmosDBName=${COSMOS_DB_NAME} \
                --parameters grantCosmosAccess=false \
                --parameters githubActionsPrincipalID=${{ secrets.GHA_PRINCIPAL_ID }}

              # regional role assignments
              az deployment group create \
                --name "region-roleassigns-${GITHUB_RUN_ID}" \
                --resource-group "${SC_RESOURCEGROUP}" \
                --template-file templates/dev-region-roleassignments.bicep \
                --parameters serviceKeyVaultName=${SVC_KV_NAME} \
                --parameters githubActionsPrincipalID=${{ secrets.GHA_PRINCIPAL_ID }}

    build_push_frontend:
      permissions:
        id-token: 'write'
        contents: 'read'
      runs-on: 'ubuntu-latest'
      steps:
        - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
          with:
            fetch-depth: 1

        - name: Build frontend container image
          env:
            ARO_HCP_IMAGE_ACR: devarohcp
          run: |
            cd frontend/
            make image

        - name: 'Az CLI login'
          if: github.event.pull_request.merged == true
          uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - name: Push frontend container image
          if: github.event.pull_request.merged == true
          env:
            ARO_HCP_IMAGE_ACR: devarohcp
          run: |
            cd frontend/
            az acr login --name devarohcp
            make push

    deploy_to_service_cluster:
      if: github.event.pull_request.merged == true
      needs:
        - build_push_frontend
        - deploy_update_infra
      permissions:
        id-token: 'write'
        contents: 'read'
      runs-on: 'ubuntu-latest'
      outputs:
        service_cluster_name: ${{ steps.find_service_cluster.name }}
      steps:
        - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
          with:
            fetch-depth: 1

        - name: 'Az CLI login'
          uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a # v2.1.1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - name: 'Find service cluster'
          id: find_service_cluster
          uses: azure/cli@965c8d7571d2231a54e321ddd07f7b10317f34d9 # v2.0.0
          env:
            RESOURCEGROUP: aro-hcp-dev
          with:
            azcliversion: latest
            inlineScript: |
              echo "name=$(az aks list --resource-group "${RESOURCEGROUP}" --output tsv --query "[?tags.clusterType == 'svc-cluster'].name | [0]")" >> $GITHUB_OUTPUT

        - uses: azure/setup-kubectl@3e0aec4d80787158d308d7b364cb1b702e7feb7f # v4.0.0

        # Deploying Cluster Service and Maestro Server leverage OpenShift Templates
        - name: 'Install oc'
          run: |
            curl -sfLo - https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.15.9/openshift-client-linux.tar.gz | tar xzf -
            sudo mv oc /usr/local/bin/oc
            chmod +x /usr/local/bin/oc

        - uses: azure/use-kubelogin@76597ae0fcbaace21b05e13a2cbf8daee2c6e820 # v1.2
          with:
            kubelogin-version: 'v0.1.3'

        - name: 'Setup kubectl for service cluster'
          uses: azure/aks-set-context@37037e33d3a2fc08abe40c887d81c3f6e1eb93b9 # v4.0.0
          with:
            resource-group: 'aro-hcp-dev'
            cluster-name: ${{ steps.find_service_cluster.outputs.name }}
            use-kubelogin: 'true'

        - name: 'Deploy Istio Configuration'
          run: |
            cd istio
            make deploy-service

        - name: 'Deploy Frontend'
          env:
            RESOURCEGROUP: aro-hcp-dev
          run: |
            cd frontend/
            make kustomize-update
            make kustomize-deploy

        - name: 'Deploy Cluster Service'
          env:
            RESOURCEGROUP: aro-hcp-dev
            CONSUMER_NAME: aro-hcp-dev-mc
          run: |
            cd cluster-service/
            make deploy

        - name: 'Deploy Maestro Server'
          env:
            RESOURCEGROUP: aro-hcp-dev
            MAESTRO_INFRA_RESOURCEGROUP: aro-hcp-dev
          run: |
            cd maestro/
            make deploy-server

    deploy_to_management_cluster:
      if: github.event.pull_request.merged == true
      needs:
      - deploy_update_infra
      permissions:
        id-token: 'write'
        contents: 'read'
      runs-on: 'ubuntu-latest'
      outputs:
        management_cluster_name: ${{ steps.find_management_cluster.name }}
      steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 1

      - name: 'Az CLI login'
        uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a # v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Find management cluster'
        id: find_management_cluster
        uses: azure/cli@965c8d7571d2231a54e321ddd07f7b10317f34d9 # v2.0.0
        env:
          RESOURCEGROUP: aro-hcp-dev-mc
        with:
          azcliversion: latest
          inlineScript: |
            echo "name=$(az aks list --resource-group "${RESOURCEGROUP}" --output tsv --query "[?tags.clusterType == 'mgmt-cluster'].name | [0]")" >> $GITHUB_OUTPUT

      - uses: azure/setup-kubectl@3e0aec4d80787158d308d7b364cb1b702e7feb7f # v4.0.0

      - uses: azure/use-kubelogin@76597ae0fcbaace21b05e13a2cbf8daee2c6e820 # v1.2
        with:
          kubelogin-version: 'v0.1.3'

      - name: 'Install oc'
        run: |
          curl -sfLo - https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.15.9/openshift-client-linux.tar.gz | tar xzf -
          sudo mv oc /usr/local/bin/oc
          chmod +x /usr/local/bin/oc

      - name: 'Setup kubectl for management cluster'
        uses: azure/aks-set-context@37037e33d3a2fc08abe40c887d81c3f6e1eb93b9 # v4.0.0
        with:
          resource-group: 'aro-hcp-dev-mc'
          cluster-name: ${{ steps.find_management_cluster.outputs.name }}
          use-kubelogin: 'true'

      - name: 'Deploy PKO'
        env:
          RESOURCEGROUP: aro-hcp-dev-mc
        run: |
          cd pko/
          make deploy

      - name: 'Deploy ACM'
        env:
          RESOURCEGROUP: aro-hcp-dev-mc
        run: |
          cd acm/
          make deploy

      - name: 'Deploy Maestro Agent'
        env:
          RESOURCEGROUP: aro-hcp-dev-mc
          MAESTRO_INFRA_RESOURCEGROUP: aro-hcp-dev
        run: |
          cd maestro/
          make deploy-agent

      - name: 'Deploy Hypershift Operator and External DNS Operator'
        env:
          RESOURCEGROUP: aro-hcp-dev-mc
          ZONE_RESOURCE_GROUP: aro-hcp-dev
        run: |
          cd hypershiftoperator/
          make deploy
