---
kind: Template
apiVersion: v1
metadata:
  name: maestro-service
parameters:

- name: ENVIRONMENT
  displayName: Environment
  description: Which Account Manager environment to use for this deployment
  value: production

- name: IMAGE_REGISTRY
  displayName: Image Registry
  required: true

- name: IMAGE_REPOSITORY
  displayName: Image Repository
  required: true

- name: VERSION
  displayName: Image version
  value: latest

- name: IMAGE_TAG
  displayName: Image tag
  value: latest

- name: GLOG_V
  displayName: GLOG V Level
  description: Log verbosity level
  value: "10"

- name: MEMORY_REQUEST
  description: Memory request for the API pods.
  value: "512Mi"

- name: MEMORY_LIMIT
  description: Memory limit for the API pods.
  value: "1Gi"

- name: CPU_REQUEST
  description: CPU request for the API pods.
  value: "200m"

- name: CPU_LIMIT
  description: CPU limit for the API pods.
  value: "1"

- name: OCM_BASE_URL
  displayName: OCM API Base URL
  description: Base path for all OCM APIs

- name: OCM_DEBUG
  displayName: OCM API Debug mode
  description: Debug mode for OCM API client
  value: "false"

- name: REPLICAS
  description: Number of replicas of the service to run.
  value: "1"

- name: ENABLE_JWT
  displayName: Enable JWT
  description: Enable JWT authentication validation
  value: "false"

- name: ENABLE_HTTPS
  displayName: Enable HTTPS
  description: Enable HTTPS rather than HTTP
  value: "false"

- name: HTTP_SERVER_BINDPORT
  displayName: HTTP Server Bindport
  description: HTTP server bind port
  value: "8000"

- name: ENABLE_GRPC_SERVER
  displayName: Enable gRPC Server
  description: Enable gRPC server
  value: "true"

- name: GRPC_SERVER_BINDPORT
  displayName: gRPC Server Bindport
  description: gRPC server bind port
  value: "8090"

- name: METRICS_SERVER_BINDPORT
  displayName: Metrics Server Bindport
  description: Metrics server bind port
  value: "8080"

- name: HEALTH_CHECK_SERVER_BINDPORT
  displayName: Health check Server Bindport
  description: Health check server bind port
  value: "8083"

- name: HTTP_SERVER_HOSTNAME
  displayName: HTTP Server Hostname
  description: Server's public hostname
  value: ""

- name: ENABLE_AUTHZ
  displayName: Enable Authz
  description: Enable Authorization on endpoints, should only be disabled for debug
  value: "true"

- name: DB_MAX_OPEN_CONNS
  displayName: Maximum Open Database Connections
  description: Maximum number of open database connections per pod
  value: "50"

- name: DB_SSLMODE
  displayName: DB SSLmode
  description: Database ssl mode (disable | require | verify-ca | verify-full)
  value: "verify-full"

- name: ENABLE_DB_DEBUG
  displayName: Enable DB Debug
  description: framework's debug mode
  value: "false"

- name: ENABLE_METRICS_HTTPS
  displayName: Enable Metrics HTTPS
  description: Enable HTTPS for metrics server
  value: "false"

- name: ENABLE_OCM_MOCK
  displayName: Enable OCM Mock
  description: Enable mock uhc client
  value: "true"

- name: HTTP_READ_TIMEOUT
  displayName: HTTP Read Timeout
  description: HTTP server read timeout
  value: 5s

- name: HTTP_WRITE_TIMEOUT
  displayName: HTTP Write Timeout
  description: HTTP server write timeout
  value: 30s

- name: LABEL_METRICS_INCLUSION_DURATION
  displayName: Label metrics inclusion duration
  description: A cluster's last telemetry date needs be within in this duration in order to have labels collected
  value: "168h"

- name: DB_SECRET_NAME
  displayName: Database Secret Name
  description: Name of the secret containing database connection information
  value: "maestro-db"

- name: NAMESPACE
  description: The OpenShift Namespace where the resources will be created.
  displayName: Namespace
  required: true
  value: maestro

- name: MAESTRO_MI_CLIENT_ID
  displayName: Maestro Managed Identity Client ID
  description: Client ID for the managed identity used by Maestro
  required: true

- name: AZURE_TENANT_ID
  required: true

- name: MAESTRO_KV_NAME
  displayName: Maestro Key Vault Name
  description: Name of the key vault used by Maestro
  required: true

objects:
  - apiVersion: secrets-store.csi.x-k8s.io/v1
    kind: SecretProviderClass
    metadata:
      name: maestro
      namespace: ${NAMESPACE}
    spec:
      parameters:
        clientID: ${MAESTRO_MI_CLIENT_ID}
        cloudName: AzurePublicCloud
        keyvaultName: ${MAESTRO_KV_NAME}
        objects: |-
          array:
            - |
              objectName: maestro-server
              objectType: secret
              objectAlias: maestro
        tenantId: ${AZURE_TENANT_ID}
        usePodIdentity: "false"
      provider: azure
  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: maestro
      namespace: ${NAMESPACE}
      annotations:
        azure.workload.identity/client-id: ${MAESTRO_MI_CLIENT_ID}
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: maestro
      namespace: ${NAMESPACE}
      labels:
        app: maestro
    spec:
      selector:
        matchLabels:
          app: maestro
      replicas: ${{REPLICAS}}
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          labels:
            app: maestro
        spec:
          serviceAccountName: maestro
          volumes:
          - name: db
            secret:
              secretName: ${DB_SECRET_NAME}
          - name: mqtt
            secret:
              secretName: maestro-mqtt
          - name: mqtt-creds
            csi:
              driver: secrets-store.csi.k8s.io
              readOnly: true
              volumeAttributes:
                secretProviderClass: "maestro"
          initContainers:
          - name: migration
            image: ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}:${IMAGE_TAG}
            imagePullPolicy: IfNotPresent
            volumeMounts:
            - name: db
              mountPath: /secrets/db
            command:
            - /usr/local/bin/maestro
            - migration
            - --db-host-file=/secrets/db/db.host
            - --db-port-file=/secrets/db/db.port
            - --db-user-file=/secrets/db/db.user
            - --db-password-file=/secrets/db/db.password
            - --db-name-file=/secrets/db/db.name
            - --db-sslmode=${DB_SSLMODE}
            - --alsologtostderr
            - -v=${GLOG_V}
          containers:
          - name: service
            image: ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}:${IMAGE_TAG}
            imagePullPolicy: IfNotPresent
            volumeMounts:
            - name: db
              mountPath: /secrets/db
            - name: mqtt
              mountPath: /secrets/mqtt
            - name: mqtt-creds
              mountPath: /secrets/mqtt-creds
              readOnly: true
            env:
              - name: "AMS_ENV"
                value: "${ENVIRONMENT}"
              - name: POD_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.name
            command:
            - /usr/local/bin/maestro
            - server
            - --client-id=maestro-$(POD_NAME)
            - --subscription-type=broadcast
            - --db-host-file=/secrets/db/db.host
            - --db-port-file=/secrets/db/db.port
            - --db-user-file=/secrets/db/db.user
            - --db-password-file=/secrets/db/db.password
            - --db-name-file=/secrets/db/db.name
            - --db-rootcert=/secrets/db/db.ca_cert
            - --db-sslmode=${DB_SSLMODE}
            - --db-max-open-connections=${DB_MAX_OPEN_CONNS}
            - --message-broker-config-file=/secrets/mqtt/config.yaml
            - --message-broker-type=mqtt
            - --enable-ocm-mock=${ENABLE_OCM_MOCK}
            - --enable-jwt=${ENABLE_JWT}
            - --enable-https=${ENABLE_HTTPS}
            - --enable-grpc-server=${ENABLE_GRPC_SERVER}
            - --server-hostname=${HTTP_SERVER_HOSTNAME}
            - --http-server-bindport=${HTTP_SERVER_BINDPORT}
            - --grpc-server-bindport=${GRPC_SERVER_BINDPORT}
            - --health-check-server-bindport=${HEALTH_CHECK_SERVER_BINDPORT}
            - --enable-health-check-https=${ENABLE_HTTPS}
            - --enable-authz=${ENABLE_AUTHZ}
            - --enable-db-debug=${ENABLE_DB_DEBUG}
            - --enable-metrics-https=${ENABLE_METRICS_HTTPS}
            - --enable-sentry=false
            - --http-read-timeout=${HTTP_READ_TIMEOUT}
            - --http-write-timeout=${HTTP_WRITE_TIMEOUT}
            - --label-metrics-inclusion-duration=${LABEL_METRICS_INCLUSION_DURATION}
            - --alsologtostderr
            - -v=${GLOG_V}
            resources:
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
            livenessProbe:
              httpGet:
                path: /api/maestro
                port: 8000
                scheme: HTTP
              initialDelaySeconds: 15
              periodSeconds: 5
            readinessProbe:
              httpGet:
                path: /healthcheck
                port: 8083
                scheme: HTTP
                httpHeaders:
                - name: User-Agent
                  value: Probe
              initialDelaySeconds: 20
              periodSeconds: 10

  - kind: Service
    apiVersion: v1
    metadata:
      name: maestro
      namespace: ${NAMESPACE}
      labels:
        app: maestro
        port: api
    spec:
      selector:
        app: maestro
      ports:
        - port: 8000
          targetPort: 8000
          protocol: TCP

  # Services for diagnostic ports (not part of main service because we
  # don't want exposing them externally through same route).
  - kind: Service
    apiVersion: v1
    metadata:
      name: maestro-metrics
      namespace: ${NAMESPACE}
      labels:
        app: maestro
        port: metrics
    spec:
      selector:
        app: maestro
      ports:
      - port: 8080
        targetPort: 8080
        name: metrics

  - kind: Service
    apiVersion: v1
    metadata:
      name: maestro-grpc
      namespace: ${NAMESPACE}
      labels:
        app: maestro-grpc
        port: grpc
    spec:
      selector:
        app: maestro
      ports:
        - port: 8090
          targetPort: 8090
          protocol: TCP

  - apiVersion: v1
    kind: Service
    metadata:
      name: maestro-healthcheck
      namespace: ${NAMESPACE}
      labels:
        app: maestro
        port: healthcheck
    spec:
      selector:
        app: maestro
      ports:
      - port: 8083
        targetPort: 8083
