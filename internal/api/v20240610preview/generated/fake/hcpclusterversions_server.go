//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/go@4.0.0-preview.63)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/ARO-HCP/internal/api/v20240610preview/generated"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
)

// HcpClusterVersionsServer is a fake server for instances of the generated.HcpClusterVersionsClient type.
type HcpClusterVersionsServer struct{
	// NewListByLocationPager is the fake for method HcpClusterVersionsClient.NewListByLocationPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByLocationPager func(location string, options *generated.HcpClusterVersionsClientListByLocationOptions) (resp azfake.PagerResponder[generated.HcpClusterVersionsClientListByLocationResponse])

}

// NewHcpClusterVersionsServerTransport creates a new instance of HcpClusterVersionsServerTransport with the provided implementation.
// The returned HcpClusterVersionsServerTransport instance is connected to an instance of generated.HcpClusterVersionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewHcpClusterVersionsServerTransport(srv *HcpClusterVersionsServer) *HcpClusterVersionsServerTransport {
	return &HcpClusterVersionsServerTransport{
		srv: srv,
		newListByLocationPager: newTracker[azfake.PagerResponder[generated.HcpClusterVersionsClientListByLocationResponse]](),
	}
}

// HcpClusterVersionsServerTransport connects instances of generated.HcpClusterVersionsClient to instances of HcpClusterVersionsServer.
// Don't use this type directly, use NewHcpClusterVersionsServerTransport instead.
type HcpClusterVersionsServerTransport struct {
	srv *HcpClusterVersionsServer
	newListByLocationPager *tracker[azfake.PagerResponder[generated.HcpClusterVersionsClientListByLocationResponse]]
}

// Do implements the policy.Transporter interface for HcpClusterVersionsServerTransport.
func (h *HcpClusterVersionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "HcpClusterVersionsClient.NewListByLocationPager":
		resp, err = h.dispatchNewListByLocationPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (h *HcpClusterVersionsServerTransport) dispatchNewListByLocationPager(req *http.Request) (*http.Response, error) {
	if h.srv.NewListByLocationPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByLocationPager not implemented")}
	}
	newListByLocationPager := h.newListByLocationPager.get(req)
	if newListByLocationPager == nil {
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RedHatOpenShift/hcpOpenShiftVersions`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
resp := h.srv.NewListByLocationPager(locationParam, nil)
		newListByLocationPager = &resp
		h.newListByLocationPager.add(req, newListByLocationPager)
		server.PagerResponderInjectNextLinks(newListByLocationPager, req, func(page *generated.HcpClusterVersionsClientListByLocationResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByLocationPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		h.newListByLocationPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByLocationPager) {
		h.newListByLocationPager.remove(req)
	}
	return resp, nil
}

