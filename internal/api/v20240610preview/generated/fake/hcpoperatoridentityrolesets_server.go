//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.8, generator: @autorest/go@4.0.0-preview.63)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"

	"github.com/Azure/ARO-HCP/internal/api/v20240610preview/generated"
)

// HcpOperatorIdentityRoleSetsServer is a fake server for instances of the generated.HcpOperatorIdentityRoleSetsClient type.
type HcpOperatorIdentityRoleSetsServer struct {
	// Get is the fake for method HcpOperatorIdentityRoleSetsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, location string, hcpOperatorIdentityRoleSetName string, options *generated.HcpOperatorIdentityRoleSetsClientGetOptions) (resp azfake.Responder[generated.HcpOperatorIdentityRoleSetsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method HcpOperatorIdentityRoleSetsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(location string, options *generated.HcpOperatorIdentityRoleSetsClientListOptions) (resp azfake.PagerResponder[generated.HcpOperatorIdentityRoleSetsClientListResponse])
}

// NewHcpOperatorIdentityRoleSetsServerTransport creates a new instance of HcpOperatorIdentityRoleSetsServerTransport with the provided implementation.
// The returned HcpOperatorIdentityRoleSetsServerTransport instance is connected to an instance of generated.HcpOperatorIdentityRoleSetsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewHcpOperatorIdentityRoleSetsServerTransport(srv *HcpOperatorIdentityRoleSetsServer) *HcpOperatorIdentityRoleSetsServerTransport {
	return &HcpOperatorIdentityRoleSetsServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[generated.HcpOperatorIdentityRoleSetsClientListResponse]](),
	}
}

// HcpOperatorIdentityRoleSetsServerTransport connects instances of generated.HcpOperatorIdentityRoleSetsClient to instances of HcpOperatorIdentityRoleSetsServer.
// Don't use this type directly, use NewHcpOperatorIdentityRoleSetsServerTransport instead.
type HcpOperatorIdentityRoleSetsServerTransport struct {
	srv          *HcpOperatorIdentityRoleSetsServer
	newListPager *tracker[azfake.PagerResponder[generated.HcpOperatorIdentityRoleSetsClientListResponse]]
}

// Do implements the policy.Transporter interface for HcpOperatorIdentityRoleSetsServerTransport.
func (h *HcpOperatorIdentityRoleSetsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "HcpOperatorIdentityRoleSetsClient.Get":
		resp, err = h.dispatchGet(req)
	case "HcpOperatorIdentityRoleSetsClient.NewListPager":
		resp, err = h.dispatchNewListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (h *HcpOperatorIdentityRoleSetsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if h.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RedHatOpenShift/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/hcpOperatorIdentityRoleSets/(?P<hcpOperatorIdentityRoleSetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	hcpOperatorIdentityRoleSetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("hcpOperatorIdentityRoleSetName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := h.srv.Get(req.Context(), locationParam, hcpOperatorIdentityRoleSetNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).HcpOperatorIdentityRoleSet, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HcpOperatorIdentityRoleSetsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if h.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := h.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RedHatOpenShift/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/hcpOperatorIdentityRoleSets`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		resp := h.srv.NewListPager(locationParam, nil)
		newListPager = &resp
		h.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *generated.HcpOperatorIdentityRoleSetsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		h.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		h.newListPager.remove(req)
	}
	return resp, nil
}
