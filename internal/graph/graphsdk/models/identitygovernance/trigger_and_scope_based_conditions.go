// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package identitygovernance

import (
	i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"

	i1064077c0deed3e13037469d51458ffc82d2db75e239cd9605f39aaa91186035 "github.com/Azure/ARO-HCP/internal/graph/graphsdk/models"
)

type TriggerAndScopeBasedConditions struct {
	WorkflowExecutionConditions
}

// NewTriggerAndScopeBasedConditions instantiates a new TriggerAndScopeBasedConditions and sets the default values.
func NewTriggerAndScopeBasedConditions() *TriggerAndScopeBasedConditions {
	m := &TriggerAndScopeBasedConditions{
		WorkflowExecutionConditions: *NewWorkflowExecutionConditions(),
	}
	odataTypeValue := "#microsoft.graph.identityGovernance.triggerAndScopeBasedConditions"
	m.SetOdataType(&odataTypeValue)
	return m
}

// CreateTriggerAndScopeBasedConditionsFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateTriggerAndScopeBasedConditionsFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) (i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
	return NewTriggerAndScopeBasedConditions(), nil
}

// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *TriggerAndScopeBasedConditions) GetFieldDeserializers() map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
	res := m.WorkflowExecutionConditions.GetFieldDeserializers()
	res["scope"] = func(n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
		val, err := n.GetObjectValue(i1064077c0deed3e13037469d51458ffc82d2db75e239cd9605f39aaa91186035.CreateSubjectSetFromDiscriminatorValue)
		if err != nil {
			return err
		}
		if val != nil {
			m.SetScope(val.(i1064077c0deed3e13037469d51458ffc82d2db75e239cd9605f39aaa91186035.SubjectSetable))
		}
		return nil
	}
	res["trigger"] = func(n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
		val, err := n.GetObjectValue(CreateWorkflowExecutionTriggerFromDiscriminatorValue)
		if err != nil {
			return err
		}
		if val != nil {
			m.SetTrigger(val.(WorkflowExecutionTriggerable))
		}
		return nil
	}
	return res
}

// GetScope gets the scope property value. Defines who the workflow runs for.
// returns a SubjectSetable when successful
func (m *TriggerAndScopeBasedConditions) GetScope() i1064077c0deed3e13037469d51458ffc82d2db75e239cd9605f39aaa91186035.SubjectSetable {
	val, err := m.GetBackingStore().Get("scope")
	if err != nil {
		panic(err)
	}
	if val != nil {
		return val.(i1064077c0deed3e13037469d51458ffc82d2db75e239cd9605f39aaa91186035.SubjectSetable)
	}
	return nil
}

// GetTrigger gets the trigger property value. What triggers a workflow to run.
// returns a WorkflowExecutionTriggerable when successful
func (m *TriggerAndScopeBasedConditions) GetTrigger() WorkflowExecutionTriggerable {
	val, err := m.GetBackingStore().Get("trigger")
	if err != nil {
		panic(err)
	}
	if val != nil {
		return val.(WorkflowExecutionTriggerable)
	}
	return nil
}

// Serialize serializes information the current object
func (m *TriggerAndScopeBasedConditions) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter) error {
	err := m.WorkflowExecutionConditions.Serialize(writer)
	if err != nil {
		return err
	}
	{
		err = writer.WriteObjectValue("scope", m.GetScope())
		if err != nil {
			return err
		}
	}
	{
		err = writer.WriteObjectValue("trigger", m.GetTrigger())
		if err != nil {
			return err
		}
	}
	return nil
}

// SetScope sets the scope property value. Defines who the workflow runs for.
func (m *TriggerAndScopeBasedConditions) SetScope(value i1064077c0deed3e13037469d51458ffc82d2db75e239cd9605f39aaa91186035.SubjectSetable) {
	err := m.GetBackingStore().Set("scope", value)
	if err != nil {
		panic(err)
	}
}

// SetTrigger sets the trigger property value. What triggers a workflow to run.
func (m *TriggerAndScopeBasedConditions) SetTrigger(value WorkflowExecutionTriggerable) {
	err := m.GetBackingStore().Set("trigger", value)
	if err != nil {
		panic(err)
	}
}

type TriggerAndScopeBasedConditionsable interface {
	i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
	WorkflowExecutionConditionsable
	GetScope() i1064077c0deed3e13037469d51458ffc82d2db75e239cd9605f39aaa91186035.SubjectSetable
	GetTrigger() WorkflowExecutionTriggerable
	SetScope(value i1064077c0deed3e13037469d51458ffc82d2db75e239cd9605f39aaa91186035.SubjectSetable)
	SetTrigger(value WorkflowExecutionTriggerable)
}
