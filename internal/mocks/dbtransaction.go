// Code generated by MockGen. DO NOT EDIT.
// Source: ../database/transaction.go
//
// Generated by this command:
//
//	mockgen-v0.5.0 -typed -source=../database/transaction.go -destination=dbtransaction.go -package mocks github.com/Azure/ARO-HCP/internal/database DBTransaction DBTransactionResult
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	azcosmos "github.com/Azure/azure-sdk-for-go/sdk/data/azcosmos"
	gomock "go.uber.org/mock/gomock"

	database "github.com/Azure/ARO-HCP/internal/database"
)

// MockDBTransaction is a mock of DBTransaction interface.
type MockDBTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockDBTransactionMockRecorder
	isgomock struct{}
}

// MockDBTransactionMockRecorder is the mock recorder for MockDBTransaction.
type MockDBTransactionMockRecorder struct {
	mock *MockDBTransaction
}

// NewMockDBTransaction creates a new mock instance.
func NewMockDBTransaction(ctrl *gomock.Controller) *MockDBTransaction {
	mock := &MockDBTransaction{ctrl: ctrl}
	mock.recorder = &MockDBTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBTransaction) EXPECT() *MockDBTransactionMockRecorder {
	return m.recorder
}

// CreateOperationDoc mocks base method.
func (m *MockDBTransaction) CreateOperationDoc(doc *database.OperationDocument, o *azcosmos.TransactionalBatchItemOptions) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperationDoc", doc, o)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateOperationDoc indicates an expected call of CreateOperationDoc.
func (mr *MockDBTransactionMockRecorder) CreateOperationDoc(doc, o any) *MockDBTransactionCreateOperationDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperationDoc", reflect.TypeOf((*MockDBTransaction)(nil).CreateOperationDoc), doc, o)
	return &MockDBTransactionCreateOperationDocCall{Call: call}
}

// MockDBTransactionCreateOperationDocCall wrap *gomock.Call
type MockDBTransactionCreateOperationDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBTransactionCreateOperationDocCall) Return(arg0 string) *MockDBTransactionCreateOperationDocCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBTransactionCreateOperationDocCall) Do(f func(*database.OperationDocument, *azcosmos.TransactionalBatchItemOptions) string) *MockDBTransactionCreateOperationDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBTransactionCreateOperationDocCall) DoAndReturn(f func(*database.OperationDocument, *azcosmos.TransactionalBatchItemOptions) string) *MockDBTransactionCreateOperationDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateResourceDoc mocks base method.
func (m *MockDBTransaction) CreateResourceDoc(doc *database.ResourceDocument, o *azcosmos.TransactionalBatchItemOptions) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceDoc", doc, o)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateResourceDoc indicates an expected call of CreateResourceDoc.
func (mr *MockDBTransactionMockRecorder) CreateResourceDoc(doc, o any) *MockDBTransactionCreateResourceDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceDoc", reflect.TypeOf((*MockDBTransaction)(nil).CreateResourceDoc), doc, o)
	return &MockDBTransactionCreateResourceDocCall{Call: call}
}

// MockDBTransactionCreateResourceDocCall wrap *gomock.Call
type MockDBTransactionCreateResourceDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBTransactionCreateResourceDocCall) Return(arg0 string) *MockDBTransactionCreateResourceDocCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBTransactionCreateResourceDocCall) Do(f func(*database.ResourceDocument, *azcosmos.TransactionalBatchItemOptions) string) *MockDBTransactionCreateResourceDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBTransactionCreateResourceDocCall) DoAndReturn(f func(*database.ResourceDocument, *azcosmos.TransactionalBatchItemOptions) string) *MockDBTransactionCreateResourceDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDoc mocks base method.
func (m *MockDBTransaction) DeleteDoc(itemID string, o *azcosmos.TransactionalBatchItemOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteDoc", itemID, o)
}

// DeleteDoc indicates an expected call of DeleteDoc.
func (mr *MockDBTransactionMockRecorder) DeleteDoc(itemID, o any) *MockDBTransactionDeleteDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDoc", reflect.TypeOf((*MockDBTransaction)(nil).DeleteDoc), itemID, o)
	return &MockDBTransactionDeleteDocCall{Call: call}
}

// MockDBTransactionDeleteDocCall wrap *gomock.Call
type MockDBTransactionDeleteDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBTransactionDeleteDocCall) Return() *MockDBTransactionDeleteDocCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBTransactionDeleteDocCall) Do(f func(string, *azcosmos.TransactionalBatchItemOptions)) *MockDBTransactionDeleteDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBTransactionDeleteDocCall) DoAndReturn(f func(string, *azcosmos.TransactionalBatchItemOptions)) *MockDBTransactionDeleteDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockDBTransaction) Execute(ctx context.Context, o *azcosmos.TransactionalBatchOptions) (database.DBTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, o)
	ret0, _ := ret[0].(database.DBTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockDBTransactionMockRecorder) Execute(ctx, o any) *MockDBTransactionExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDBTransaction)(nil).Execute), ctx, o)
	return &MockDBTransactionExecuteCall{Call: call}
}

// MockDBTransactionExecuteCall wrap *gomock.Call
type MockDBTransactionExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBTransactionExecuteCall) Return(arg0 database.DBTransactionResult, arg1 error) *MockDBTransactionExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBTransactionExecuteCall) Do(f func(context.Context, *azcosmos.TransactionalBatchOptions) (database.DBTransactionResult, error)) *MockDBTransactionExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBTransactionExecuteCall) DoAndReturn(f func(context.Context, *azcosmos.TransactionalBatchOptions) (database.DBTransactionResult, error)) *MockDBTransactionExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPartitionKey mocks base method.
func (m *MockDBTransaction) GetPartitionKey() azcosmos.PartitionKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionKey")
	ret0, _ := ret[0].(azcosmos.PartitionKey)
	return ret0
}

// GetPartitionKey indicates an expected call of GetPartitionKey.
func (mr *MockDBTransactionMockRecorder) GetPartitionKey() *MockDBTransactionGetPartitionKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionKey", reflect.TypeOf((*MockDBTransaction)(nil).GetPartitionKey))
	return &MockDBTransactionGetPartitionKeyCall{Call: call}
}

// MockDBTransactionGetPartitionKeyCall wrap *gomock.Call
type MockDBTransactionGetPartitionKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBTransactionGetPartitionKeyCall) Return(arg0 azcosmos.PartitionKey) *MockDBTransactionGetPartitionKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBTransactionGetPartitionKeyCall) Do(f func() azcosmos.PartitionKey) *MockDBTransactionGetPartitionKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBTransactionGetPartitionKeyCall) DoAndReturn(f func() azcosmos.PartitionKey) *MockDBTransactionGetPartitionKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnSuccess mocks base method.
func (m *MockDBTransaction) OnSuccess(callback database.DBTransactionCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnSuccess", callback)
}

// OnSuccess indicates an expected call of OnSuccess.
func (mr *MockDBTransactionMockRecorder) OnSuccess(callback any) *MockDBTransactionOnSuccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSuccess", reflect.TypeOf((*MockDBTransaction)(nil).OnSuccess), callback)
	return &MockDBTransactionOnSuccessCall{Call: call}
}

// MockDBTransactionOnSuccessCall wrap *gomock.Call
type MockDBTransactionOnSuccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBTransactionOnSuccessCall) Return() *MockDBTransactionOnSuccessCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBTransactionOnSuccessCall) Do(f func(database.DBTransactionCallback)) *MockDBTransactionOnSuccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBTransactionOnSuccessCall) DoAndReturn(f func(database.DBTransactionCallback)) *MockDBTransactionOnSuccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PatchOperationDoc mocks base method.
func (m *MockDBTransaction) PatchOperationDoc(itemID string, ops database.OperationDocumentPatchOperations, o *azcosmos.TransactionalBatchItemOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PatchOperationDoc", itemID, ops, o)
}

// PatchOperationDoc indicates an expected call of PatchOperationDoc.
func (mr *MockDBTransactionMockRecorder) PatchOperationDoc(itemID, ops, o any) *MockDBTransactionPatchOperationDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchOperationDoc", reflect.TypeOf((*MockDBTransaction)(nil).PatchOperationDoc), itemID, ops, o)
	return &MockDBTransactionPatchOperationDocCall{Call: call}
}

// MockDBTransactionPatchOperationDocCall wrap *gomock.Call
type MockDBTransactionPatchOperationDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBTransactionPatchOperationDocCall) Return() *MockDBTransactionPatchOperationDocCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBTransactionPatchOperationDocCall) Do(f func(string, database.OperationDocumentPatchOperations, *azcosmos.TransactionalBatchItemOptions)) *MockDBTransactionPatchOperationDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBTransactionPatchOperationDocCall) DoAndReturn(f func(string, database.OperationDocumentPatchOperations, *azcosmos.TransactionalBatchItemOptions)) *MockDBTransactionPatchOperationDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PatchResourceDoc mocks base method.
func (m *MockDBTransaction) PatchResourceDoc(itemID string, ops database.ResourceDocumentPatchOperations, o *azcosmos.TransactionalBatchItemOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PatchResourceDoc", itemID, ops, o)
}

// PatchResourceDoc indicates an expected call of PatchResourceDoc.
func (mr *MockDBTransactionMockRecorder) PatchResourceDoc(itemID, ops, o any) *MockDBTransactionPatchResourceDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchResourceDoc", reflect.TypeOf((*MockDBTransaction)(nil).PatchResourceDoc), itemID, ops, o)
	return &MockDBTransactionPatchResourceDocCall{Call: call}
}

// MockDBTransactionPatchResourceDocCall wrap *gomock.Call
type MockDBTransactionPatchResourceDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBTransactionPatchResourceDocCall) Return() *MockDBTransactionPatchResourceDocCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBTransactionPatchResourceDocCall) Do(f func(string, database.ResourceDocumentPatchOperations, *azcosmos.TransactionalBatchItemOptions)) *MockDBTransactionPatchResourceDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBTransactionPatchResourceDocCall) DoAndReturn(f func(string, database.ResourceDocumentPatchOperations, *azcosmos.TransactionalBatchItemOptions)) *MockDBTransactionPatchResourceDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadDoc mocks base method.
func (m *MockDBTransaction) ReadDoc(itemID string, o *azcosmos.TransactionalBatchItemOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadDoc", itemID, o)
}

// ReadDoc indicates an expected call of ReadDoc.
func (mr *MockDBTransactionMockRecorder) ReadDoc(itemID, o any) *MockDBTransactionReadDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDoc", reflect.TypeOf((*MockDBTransaction)(nil).ReadDoc), itemID, o)
	return &MockDBTransactionReadDocCall{Call: call}
}

// MockDBTransactionReadDocCall wrap *gomock.Call
type MockDBTransactionReadDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBTransactionReadDocCall) Return() *MockDBTransactionReadDocCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBTransactionReadDocCall) Do(f func(string, *azcosmos.TransactionalBatchItemOptions)) *MockDBTransactionReadDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBTransactionReadDocCall) DoAndReturn(f func(string, *azcosmos.TransactionalBatchItemOptions)) *MockDBTransactionReadDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDBTransactionResult is a mock of DBTransactionResult interface.
type MockDBTransactionResult struct {
	ctrl     *gomock.Controller
	recorder *MockDBTransactionResultMockRecorder
	isgomock struct{}
}

// MockDBTransactionResultMockRecorder is the mock recorder for MockDBTransactionResult.
type MockDBTransactionResultMockRecorder struct {
	mock *MockDBTransactionResult
}

// NewMockDBTransactionResult creates a new mock instance.
func NewMockDBTransactionResult(ctrl *gomock.Controller) *MockDBTransactionResult {
	mock := &MockDBTransactionResult{ctrl: ctrl}
	mock.recorder = &MockDBTransactionResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBTransactionResult) EXPECT() *MockDBTransactionResultMockRecorder {
	return m.recorder
}

// GetOperationDoc mocks base method.
func (m *MockDBTransactionResult) GetOperationDoc(itemID string) (*database.OperationDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationDoc", itemID)
	ret0, _ := ret[0].(*database.OperationDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationDoc indicates an expected call of GetOperationDoc.
func (mr *MockDBTransactionResultMockRecorder) GetOperationDoc(itemID any) *MockDBTransactionResultGetOperationDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationDoc", reflect.TypeOf((*MockDBTransactionResult)(nil).GetOperationDoc), itemID)
	return &MockDBTransactionResultGetOperationDocCall{Call: call}
}

// MockDBTransactionResultGetOperationDocCall wrap *gomock.Call
type MockDBTransactionResultGetOperationDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBTransactionResultGetOperationDocCall) Return(arg0 *database.OperationDocument, arg1 error) *MockDBTransactionResultGetOperationDocCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBTransactionResultGetOperationDocCall) Do(f func(string) (*database.OperationDocument, error)) *MockDBTransactionResultGetOperationDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBTransactionResultGetOperationDocCall) DoAndReturn(f func(string) (*database.OperationDocument, error)) *MockDBTransactionResultGetOperationDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResourceDoc mocks base method.
func (m *MockDBTransactionResult) GetResourceDoc(itemID string) (*database.ResourceDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceDoc", itemID)
	ret0, _ := ret[0].(*database.ResourceDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceDoc indicates an expected call of GetResourceDoc.
func (mr *MockDBTransactionResultMockRecorder) GetResourceDoc(itemID any) *MockDBTransactionResultGetResourceDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceDoc", reflect.TypeOf((*MockDBTransactionResult)(nil).GetResourceDoc), itemID)
	return &MockDBTransactionResultGetResourceDocCall{Call: call}
}

// MockDBTransactionResultGetResourceDocCall wrap *gomock.Call
type MockDBTransactionResultGetResourceDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBTransactionResultGetResourceDocCall) Return(arg0 *database.ResourceDocument, arg1 error) *MockDBTransactionResultGetResourceDocCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBTransactionResultGetResourceDocCall) Do(f func(string) (*database.ResourceDocument, error)) *MockDBTransactionResultGetResourceDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBTransactionResultGetResourceDocCall) DoAndReturn(f func(string) (*database.ResourceDocument, error)) *MockDBTransactionResultGetResourceDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
