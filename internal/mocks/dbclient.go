// Code generated by MockGen. DO NOT EDIT.
// Source: ../database/database.go
//
// Generated by this command:
//
//	mockgen-v0.5.0 -typed -source=../database/database.go -destination=dbclient.go -package mocks github.com/Azure/ARO-HCP/internal/database DBClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	arm0 "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	azcosmos "github.com/Azure/azure-sdk-for-go/sdk/data/azcosmos"
	gomock "go.uber.org/mock/gomock"

	arm "github.com/Azure/ARO-HCP/internal/api/arm"
	database "github.com/Azure/ARO-HCP/internal/database"
)

// MockDBClientIterator is a mock of DBClientIterator interface.
type MockDBClientIterator[T database.DocumentProperties] struct {
	ctrl     *gomock.Controller
	recorder *MockDBClientIteratorMockRecorder[T]
	isgomock struct{}
}

// MockDBClientIteratorMockRecorder is the mock recorder for MockDBClientIterator.
type MockDBClientIteratorMockRecorder[T database.DocumentProperties] struct {
	mock *MockDBClientIterator[T]
}

// NewMockDBClientIterator creates a new mock instance.
func NewMockDBClientIterator[T database.DocumentProperties](ctrl *gomock.Controller) *MockDBClientIterator[T] {
	mock := &MockDBClientIterator[T]{ctrl: ctrl}
	mock.recorder = &MockDBClientIteratorMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBClientIterator[T]) EXPECT() *MockDBClientIteratorMockRecorder[T] {
	return m.recorder
}

// GetContinuationToken mocks base method.
func (m *MockDBClientIterator[T]) GetContinuationToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContinuationToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContinuationToken indicates an expected call of GetContinuationToken.
func (mr *MockDBClientIteratorMockRecorder[T]) GetContinuationToken() *MockDBClientIteratorGetContinuationTokenCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContinuationToken", reflect.TypeOf((*MockDBClientIterator[T])(nil).GetContinuationToken))
	return &MockDBClientIteratorGetContinuationTokenCall[T]{Call: call}
}

// MockDBClientIteratorGetContinuationTokenCall wrap *gomock.Call
type MockDBClientIteratorGetContinuationTokenCall[T database.DocumentProperties] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientIteratorGetContinuationTokenCall[T]) Return(arg0 string) *MockDBClientIteratorGetContinuationTokenCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientIteratorGetContinuationTokenCall[T]) Do(f func() string) *MockDBClientIteratorGetContinuationTokenCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientIteratorGetContinuationTokenCall[T]) DoAndReturn(f func() string) *MockDBClientIteratorGetContinuationTokenCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetError mocks base method.
func (m *MockDBClientIterator[T]) GetError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetError")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetError indicates an expected call of GetError.
func (mr *MockDBClientIteratorMockRecorder[T]) GetError() *MockDBClientIteratorGetErrorCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetError", reflect.TypeOf((*MockDBClientIterator[T])(nil).GetError))
	return &MockDBClientIteratorGetErrorCall[T]{Call: call}
}

// MockDBClientIteratorGetErrorCall wrap *gomock.Call
type MockDBClientIteratorGetErrorCall[T database.DocumentProperties] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientIteratorGetErrorCall[T]) Return(arg0 error) *MockDBClientIteratorGetErrorCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientIteratorGetErrorCall[T]) Do(f func() error) *MockDBClientIteratorGetErrorCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientIteratorGetErrorCall[T]) DoAndReturn(f func() error) *MockDBClientIteratorGetErrorCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Items mocks base method.
func (m *MockDBClientIterator[T]) Items(ctx context.Context) database.DBClientIteratorItem[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Items", ctx)
	ret0, _ := ret[0].(database.DBClientIteratorItem[T])
	return ret0
}

// Items indicates an expected call of Items.
func (mr *MockDBClientIteratorMockRecorder[T]) Items(ctx any) *MockDBClientIteratorItemsCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Items", reflect.TypeOf((*MockDBClientIterator[T])(nil).Items), ctx)
	return &MockDBClientIteratorItemsCall[T]{Call: call}
}

// MockDBClientIteratorItemsCall wrap *gomock.Call
type MockDBClientIteratorItemsCall[T database.DocumentProperties] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientIteratorItemsCall[T]) Return(arg0 database.DBClientIteratorItem[T]) *MockDBClientIteratorItemsCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientIteratorItemsCall[T]) Do(f func(context.Context) database.DBClientIteratorItem[T]) *MockDBClientIteratorItemsCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientIteratorItemsCall[T]) DoAndReturn(f func(context.Context) database.DBClientIteratorItem[T]) *MockDBClientIteratorItemsCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDBClient is a mock of DBClient interface.
type MockDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockDBClientMockRecorder
	isgomock struct{}
}

// MockDBClientMockRecorder is the mock recorder for MockDBClient.
type MockDBClientMockRecorder struct {
	mock *MockDBClient
}

// NewMockDBClient creates a new mock instance.
func NewMockDBClient(ctrl *gomock.Controller) *MockDBClient {
	mock := &MockDBClient{ctrl: ctrl}
	mock.recorder = &MockDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBClient) EXPECT() *MockDBClientMockRecorder {
	return m.recorder
}

// CreateOperationDoc mocks base method.
func (m *MockDBClient) CreateOperationDoc(ctx context.Context, doc *database.OperationDocument) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperationDoc", ctx, doc)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOperationDoc indicates an expected call of CreateOperationDoc.
func (mr *MockDBClientMockRecorder) CreateOperationDoc(ctx, doc any) *MockDBClientCreateOperationDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperationDoc", reflect.TypeOf((*MockDBClient)(nil).CreateOperationDoc), ctx, doc)
	return &MockDBClientCreateOperationDocCall{Call: call}
}

// MockDBClientCreateOperationDocCall wrap *gomock.Call
type MockDBClientCreateOperationDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientCreateOperationDocCall) Return(arg0 string, arg1 error) *MockDBClientCreateOperationDocCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientCreateOperationDocCall) Do(f func(context.Context, *database.OperationDocument) (string, error)) *MockDBClientCreateOperationDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientCreateOperationDocCall) DoAndReturn(f func(context.Context, *database.OperationDocument) (string, error)) *MockDBClientCreateOperationDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateResourceDoc mocks base method.
func (m *MockDBClient) CreateResourceDoc(ctx context.Context, doc *database.ResourceDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceDoc", ctx, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateResourceDoc indicates an expected call of CreateResourceDoc.
func (mr *MockDBClientMockRecorder) CreateResourceDoc(ctx, doc any) *MockDBClientCreateResourceDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceDoc", reflect.TypeOf((*MockDBClient)(nil).CreateResourceDoc), ctx, doc)
	return &MockDBClientCreateResourceDocCall{Call: call}
}

// MockDBClientCreateResourceDocCall wrap *gomock.Call
type MockDBClientCreateResourceDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientCreateResourceDocCall) Return(arg0 error) *MockDBClientCreateResourceDocCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientCreateResourceDocCall) Do(f func(context.Context, *database.ResourceDocument) error) *MockDBClientCreateResourceDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientCreateResourceDocCall) DoAndReturn(f func(context.Context, *database.ResourceDocument) error) *MockDBClientCreateResourceDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSubscriptionDoc mocks base method.
func (m *MockDBClient) CreateSubscriptionDoc(ctx context.Context, subscriptionID string, subscription *arm.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionDoc", ctx, subscriptionID, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscriptionDoc indicates an expected call of CreateSubscriptionDoc.
func (mr *MockDBClientMockRecorder) CreateSubscriptionDoc(ctx, subscriptionID, subscription any) *MockDBClientCreateSubscriptionDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionDoc", reflect.TypeOf((*MockDBClient)(nil).CreateSubscriptionDoc), ctx, subscriptionID, subscription)
	return &MockDBClientCreateSubscriptionDocCall{Call: call}
}

// MockDBClientCreateSubscriptionDocCall wrap *gomock.Call
type MockDBClientCreateSubscriptionDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientCreateSubscriptionDocCall) Return(arg0 error) *MockDBClientCreateSubscriptionDocCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientCreateSubscriptionDocCall) Do(f func(context.Context, string, *arm.Subscription) error) *MockDBClientCreateSubscriptionDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientCreateSubscriptionDocCall) DoAndReturn(f func(context.Context, string, *arm.Subscription) error) *MockDBClientCreateSubscriptionDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DBConnectionTest mocks base method.
func (m *MockDBClient) DBConnectionTest(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBConnectionTest", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DBConnectionTest indicates an expected call of DBConnectionTest.
func (mr *MockDBClientMockRecorder) DBConnectionTest(ctx any) *MockDBClientDBConnectionTestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBConnectionTest", reflect.TypeOf((*MockDBClient)(nil).DBConnectionTest), ctx)
	return &MockDBClientDBConnectionTestCall{Call: call}
}

// MockDBClientDBConnectionTestCall wrap *gomock.Call
type MockDBClientDBConnectionTestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientDBConnectionTestCall) Return(arg0 error) *MockDBClientDBConnectionTestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientDBConnectionTestCall) Do(f func(context.Context) error) *MockDBClientDBConnectionTestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientDBConnectionTestCall) DoAndReturn(f func(context.Context) error) *MockDBClientDBConnectionTestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteResourceDoc mocks base method.
func (m *MockDBClient) DeleteResourceDoc(ctx context.Context, resourceID *arm0.ResourceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceDoc", ctx, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceDoc indicates an expected call of DeleteResourceDoc.
func (mr *MockDBClientMockRecorder) DeleteResourceDoc(ctx, resourceID any) *MockDBClientDeleteResourceDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceDoc", reflect.TypeOf((*MockDBClient)(nil).DeleteResourceDoc), ctx, resourceID)
	return &MockDBClientDeleteResourceDocCall{Call: call}
}

// MockDBClientDeleteResourceDocCall wrap *gomock.Call
type MockDBClientDeleteResourceDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientDeleteResourceDocCall) Return(arg0 error) *MockDBClientDeleteResourceDocCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientDeleteResourceDocCall) Do(f func(context.Context, *arm0.ResourceID) error) *MockDBClientDeleteResourceDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientDeleteResourceDocCall) DoAndReturn(f func(context.Context, *arm0.ResourceID) error) *MockDBClientDeleteResourceDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLockClient mocks base method.
func (m *MockDBClient) GetLockClient() *database.LockClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLockClient")
	ret0, _ := ret[0].(*database.LockClient)
	return ret0
}

// GetLockClient indicates an expected call of GetLockClient.
func (mr *MockDBClientMockRecorder) GetLockClient() *MockDBClientGetLockClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockClient", reflect.TypeOf((*MockDBClient)(nil).GetLockClient))
	return &MockDBClientGetLockClientCall{Call: call}
}

// MockDBClientGetLockClientCall wrap *gomock.Call
type MockDBClientGetLockClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientGetLockClientCall) Return(arg0 *database.LockClient) *MockDBClientGetLockClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientGetLockClientCall) Do(f func() *database.LockClient) *MockDBClientGetLockClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientGetLockClientCall) DoAndReturn(f func() *database.LockClient) *MockDBClientGetLockClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperationDoc mocks base method.
func (m *MockDBClient) GetOperationDoc(ctx context.Context, pk azcosmos.PartitionKey, operationID string) (*database.OperationDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationDoc", ctx, pk, operationID)
	ret0, _ := ret[0].(*database.OperationDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationDoc indicates an expected call of GetOperationDoc.
func (mr *MockDBClientMockRecorder) GetOperationDoc(ctx, pk, operationID any) *MockDBClientGetOperationDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationDoc", reflect.TypeOf((*MockDBClient)(nil).GetOperationDoc), ctx, pk, operationID)
	return &MockDBClientGetOperationDocCall{Call: call}
}

// MockDBClientGetOperationDocCall wrap *gomock.Call
type MockDBClientGetOperationDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientGetOperationDocCall) Return(arg0 *database.OperationDocument, arg1 error) *MockDBClientGetOperationDocCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientGetOperationDocCall) Do(f func(context.Context, azcosmos.PartitionKey, string) (*database.OperationDocument, error)) *MockDBClientGetOperationDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientGetOperationDocCall) DoAndReturn(f func(context.Context, azcosmos.PartitionKey, string) (*database.OperationDocument, error)) *MockDBClientGetOperationDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResourceDoc mocks base method.
func (m *MockDBClient) GetResourceDoc(ctx context.Context, resourceID *arm0.ResourceID) (*database.ResourceDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceDoc", ctx, resourceID)
	ret0, _ := ret[0].(*database.ResourceDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceDoc indicates an expected call of GetResourceDoc.
func (mr *MockDBClientMockRecorder) GetResourceDoc(ctx, resourceID any) *MockDBClientGetResourceDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceDoc", reflect.TypeOf((*MockDBClient)(nil).GetResourceDoc), ctx, resourceID)
	return &MockDBClientGetResourceDocCall{Call: call}
}

// MockDBClientGetResourceDocCall wrap *gomock.Call
type MockDBClientGetResourceDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientGetResourceDocCall) Return(arg0 *database.ResourceDocument, arg1 error) *MockDBClientGetResourceDocCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientGetResourceDocCall) Do(f func(context.Context, *arm0.ResourceID) (*database.ResourceDocument, error)) *MockDBClientGetResourceDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientGetResourceDocCall) DoAndReturn(f func(context.Context, *arm0.ResourceID) (*database.ResourceDocument, error)) *MockDBClientGetResourceDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSubscriptionDoc mocks base method.
func (m *MockDBClient) GetSubscriptionDoc(ctx context.Context, subscriptionID string) (*arm.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionDoc", ctx, subscriptionID)
	ret0, _ := ret[0].(*arm.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionDoc indicates an expected call of GetSubscriptionDoc.
func (mr *MockDBClientMockRecorder) GetSubscriptionDoc(ctx, subscriptionID any) *MockDBClientGetSubscriptionDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionDoc", reflect.TypeOf((*MockDBClient)(nil).GetSubscriptionDoc), ctx, subscriptionID)
	return &MockDBClientGetSubscriptionDocCall{Call: call}
}

// MockDBClientGetSubscriptionDocCall wrap *gomock.Call
type MockDBClientGetSubscriptionDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientGetSubscriptionDocCall) Return(arg0 *arm.Subscription, arg1 error) *MockDBClientGetSubscriptionDocCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientGetSubscriptionDocCall) Do(f func(context.Context, string) (*arm.Subscription, error)) *MockDBClientGetSubscriptionDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientGetSubscriptionDocCall) DoAndReturn(f func(context.Context, string) (*arm.Subscription, error)) *MockDBClientGetSubscriptionDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllSubscriptionDocs mocks base method.
func (m *MockDBClient) ListAllSubscriptionDocs() database.DBClientIterator[arm.Subscription] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllSubscriptionDocs")
	ret0, _ := ret[0].(database.DBClientIterator[arm.Subscription])
	return ret0
}

// ListAllSubscriptionDocs indicates an expected call of ListAllSubscriptionDocs.
func (mr *MockDBClientMockRecorder) ListAllSubscriptionDocs() *MockDBClientListAllSubscriptionDocsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllSubscriptionDocs", reflect.TypeOf((*MockDBClient)(nil).ListAllSubscriptionDocs))
	return &MockDBClientListAllSubscriptionDocsCall{Call: call}
}

// MockDBClientListAllSubscriptionDocsCall wrap *gomock.Call
type MockDBClientListAllSubscriptionDocsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientListAllSubscriptionDocsCall) Return(arg0 database.DBClientIterator[arm.Subscription]) *MockDBClientListAllSubscriptionDocsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientListAllSubscriptionDocsCall) Do(f func() database.DBClientIterator[arm.Subscription]) *MockDBClientListAllSubscriptionDocsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientListAllSubscriptionDocsCall) DoAndReturn(f func() database.DBClientIterator[arm.Subscription]) *MockDBClientListAllSubscriptionDocsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperationDocs mocks base method.
func (m *MockDBClient) ListOperationDocs(pk azcosmos.PartitionKey) database.DBClientIterator[database.OperationDocument] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperationDocs", pk)
	ret0, _ := ret[0].(database.DBClientIterator[database.OperationDocument])
	return ret0
}

// ListOperationDocs indicates an expected call of ListOperationDocs.
func (mr *MockDBClientMockRecorder) ListOperationDocs(pk any) *MockDBClientListOperationDocsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationDocs", reflect.TypeOf((*MockDBClient)(nil).ListOperationDocs), pk)
	return &MockDBClientListOperationDocsCall{Call: call}
}

// MockDBClientListOperationDocsCall wrap *gomock.Call
type MockDBClientListOperationDocsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientListOperationDocsCall) Return(arg0 database.DBClientIterator[database.OperationDocument]) *MockDBClientListOperationDocsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientListOperationDocsCall) Do(f func(azcosmos.PartitionKey) database.DBClientIterator[database.OperationDocument]) *MockDBClientListOperationDocsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientListOperationDocsCall) DoAndReturn(f func(azcosmos.PartitionKey) database.DBClientIterator[database.OperationDocument]) *MockDBClientListOperationDocsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResourceDocs mocks base method.
func (m *MockDBClient) ListResourceDocs(prefix *arm0.ResourceID, maxItems int32, continuationToken *string) database.DBClientIterator[database.ResourceDocument] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceDocs", prefix, maxItems, continuationToken)
	ret0, _ := ret[0].(database.DBClientIterator[database.ResourceDocument])
	return ret0
}

// ListResourceDocs indicates an expected call of ListResourceDocs.
func (mr *MockDBClientMockRecorder) ListResourceDocs(prefix, maxItems, continuationToken any) *MockDBClientListResourceDocsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceDocs", reflect.TypeOf((*MockDBClient)(nil).ListResourceDocs), prefix, maxItems, continuationToken)
	return &MockDBClientListResourceDocsCall{Call: call}
}

// MockDBClientListResourceDocsCall wrap *gomock.Call
type MockDBClientListResourceDocsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientListResourceDocsCall) Return(arg0 database.DBClientIterator[database.ResourceDocument]) *MockDBClientListResourceDocsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientListResourceDocsCall) Do(f func(*arm0.ResourceID, int32, *string) database.DBClientIterator[database.ResourceDocument]) *MockDBClientListResourceDocsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientListResourceDocsCall) DoAndReturn(f func(*arm0.ResourceID, int32, *string) database.DBClientIterator[database.ResourceDocument]) *MockDBClientListResourceDocsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOperationDoc mocks base method.
func (m *MockDBClient) UpdateOperationDoc(ctx context.Context, pk azcosmos.PartitionKey, operationID string, callback func(*database.OperationDocument) bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationDoc", ctx, pk, operationID, callback)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOperationDoc indicates an expected call of UpdateOperationDoc.
func (mr *MockDBClientMockRecorder) UpdateOperationDoc(ctx, pk, operationID, callback any) *MockDBClientUpdateOperationDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationDoc", reflect.TypeOf((*MockDBClient)(nil).UpdateOperationDoc), ctx, pk, operationID, callback)
	return &MockDBClientUpdateOperationDocCall{Call: call}
}

// MockDBClientUpdateOperationDocCall wrap *gomock.Call
type MockDBClientUpdateOperationDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientUpdateOperationDocCall) Return(arg0 bool, arg1 error) *MockDBClientUpdateOperationDocCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientUpdateOperationDocCall) Do(f func(context.Context, azcosmos.PartitionKey, string, func(*database.OperationDocument) bool) (bool, error)) *MockDBClientUpdateOperationDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientUpdateOperationDocCall) DoAndReturn(f func(context.Context, azcosmos.PartitionKey, string, func(*database.OperationDocument) bool) (bool, error)) *MockDBClientUpdateOperationDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateResourceDoc mocks base method.
func (m *MockDBClient) UpdateResourceDoc(ctx context.Context, resourceID *arm0.ResourceID, callback func(*database.ResourceDocument) bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceDoc", ctx, resourceID, callback)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceDoc indicates an expected call of UpdateResourceDoc.
func (mr *MockDBClientMockRecorder) UpdateResourceDoc(ctx, resourceID, callback any) *MockDBClientUpdateResourceDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceDoc", reflect.TypeOf((*MockDBClient)(nil).UpdateResourceDoc), ctx, resourceID, callback)
	return &MockDBClientUpdateResourceDocCall{Call: call}
}

// MockDBClientUpdateResourceDocCall wrap *gomock.Call
type MockDBClientUpdateResourceDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientUpdateResourceDocCall) Return(arg0 bool, arg1 error) *MockDBClientUpdateResourceDocCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientUpdateResourceDocCall) Do(f func(context.Context, *arm0.ResourceID, func(*database.ResourceDocument) bool) (bool, error)) *MockDBClientUpdateResourceDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientUpdateResourceDocCall) DoAndReturn(f func(context.Context, *arm0.ResourceID, func(*database.ResourceDocument) bool) (bool, error)) *MockDBClientUpdateResourceDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSubscriptionDoc mocks base method.
func (m *MockDBClient) UpdateSubscriptionDoc(ctx context.Context, subscriptionID string, callback func(*arm.Subscription) bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionDoc", ctx, subscriptionID, callback)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionDoc indicates an expected call of UpdateSubscriptionDoc.
func (mr *MockDBClientMockRecorder) UpdateSubscriptionDoc(ctx, subscriptionID, callback any) *MockDBClientUpdateSubscriptionDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionDoc", reflect.TypeOf((*MockDBClient)(nil).UpdateSubscriptionDoc), ctx, subscriptionID, callback)
	return &MockDBClientUpdateSubscriptionDocCall{Call: call}
}

// MockDBClientUpdateSubscriptionDocCall wrap *gomock.Call
type MockDBClientUpdateSubscriptionDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBClientUpdateSubscriptionDocCall) Return(arg0 bool, arg1 error) *MockDBClientUpdateSubscriptionDocCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBClientUpdateSubscriptionDocCall) Do(f func(context.Context, string, func(*arm.Subscription) bool) (bool, error)) *MockDBClientUpdateSubscriptionDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBClientUpdateSubscriptionDocCall) DoAndReturn(f func(context.Context, string, func(*arm.Subscription) bool) (bool, error)) *MockDBClientUpdateSubscriptionDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
