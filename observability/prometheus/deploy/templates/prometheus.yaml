apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: prometheus
  namespace: '{{ .Release.Namespace }}'
spec:
  image: '{{ .Values.prometheusSpec.image.registry }}/{{ .Values.prometheusSpec.image.repository }}@sha256:{{ .Values.prometheusSpec.image.sha }}'
  version: '{{ .Values.prometheusSpec.version}}'
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: aro-hcp.azure.com/role
            operator: In
            values:
            - infra
  automountServiceAccountToken: true
  enableAdminAPI: false
  evaluationInterval: 30s
  hostNetwork: false
  listenLocal: false
  logFormat: logfmt
  logLevel: info
  paused: false
  podMetadata:
    labels:
      azure.workload.identity/use: "true"
  podMonitorNamespaceSelector: {}
  podMonitorSelector: {}
  portName: http-web
  probeNamespaceSelector: {}
  probeSelector:
    matchLabels:
      release: arohcp-monitor
  replicas: 1
  retention: 1d
  retentionSize: 45GiB
  routePrefix: /
  ruleNamespaceSelector: {}
  ruleSelector: {}
  scrapeConfigNamespaceSelector: {}
  scrapeConfigSelector:
    matchLabels:
      release: arohcp-monitor
  scrapeInterval: 30s
  securityContext:
    fsGroup: 2000
    runAsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault
  serviceAccountName: prometheus
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector: {}
  shards: 1
  storage:
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: managed-premium
  tolerations:
  - effect: NoSchedule
    key: infra
    operator: Equal
    value: "true"
  topologySpreadConstraints:
  - labelSelector:
      matchLabels:
        app: prometheus
    maxSkew: 1
    topologyKey: '{{ .Values.prometheusSpec.topologyKey }}'
    whenUnsatisfiable: ScheduleAnyway
  tsdb:
    outOfOrderTimeWindow: 0s
  walCompression: true
  externalLabels:
    cluster: '{{ .Values.prometheusSpec.externalLabels.cluster }}'
  remoteWrite:
  - url: '{{ .Values.prometheusSpec.remoteWriteUrl }}'
    azureAd:
      cloud: AzurePublic
      sdk: {}
    queueConfig:
      capacity: 2500
      maxShards: 500
      minShards: 1
      maxSamplesPerSend: 2000
      batchSendDeadline: 60s
      minBackoff: 30ms
      maxBackoff: 256s
    metadataConfig:
      send: false
    {{- if .Values.environment }}
    writeRelabelConfigs:
      - sourceLabels: [namespace]
        regex: '^ocm-{{ .Values.environment }}.*'
        action: drop 
    {{- end -}}
  {{- if .Values.prometheusSpec.hcpRemoteWriteUrl }}
  - url: '{{ .Values.prometheusSpec.hcpRemoteWriteUrl }}'
    azureAd:
      cloud: AzurePublic
      sdk: {}
    queueConfig:
      capacity: 2500
      maxShards: 500
      minShards: 1
      maxSamplesPerSend: 2000
      batchSendDeadline: 60s
      minBackoff: 30ms
      maxBackoff: 256s
    metadataConfig:
      send: false
    {{- if .Values.environment }}
    writeRelabelConfigs:
      - sourceLabels: [namespace]
        regex: '^ocm-{{ .Values.environment }}.*'
        action: keep
    {{- end }}
  {{- end }}
